"use strict";function bound(value,opt_min,opt_max){return null!=opt_min&&(value=Math.max(value,opt_min)),null!=opt_max&&(value=Math.min(value,opt_max)),value}function degreesToRadians(deg){return deg*(Math.PI/180)}function radiansToDegrees(rad){return rad/(Math.PI/180)}function MercatorProjection(){this.pixelOrigin_=new google.maps.Point(TILE_SIZE/2,TILE_SIZE/2),this.pixelsPerLonDegree_=TILE_SIZE/360,this.pixelsPerLonRadian_=TILE_SIZE/(2*Math.PI)}angular.module("mol.controllers",[]),angular.module("mol",["ngSanitize","ngCookies","ngAnimate","mol.api","mol.filters","mol.services","mol.directives","mol.species-search","mol.species-description","mol.location-search","mol.species-images","mol.point-filters","mol.controllers","mol.loading-indicator","ui.bootstrap","ui.router","ui.checkbox","uiGmapgoogle-maps","ui-rangeSlider","percentage","km2","angular-loading-bar"]).config(function(uiGmapGoogleMapApiProvider){uiGmapGoogleMapApiProvider.configure({v:"3.20",libraries:"weather,geometry,visualization"})}).config(["cfpLoadingBarProvider",function(cfpLoadingBarProvider){cfpLoadingBarProvider.includeSpinner=!1,cfpLoadingBarProvider.includeBar=!1,cfpLoadingBarProvider.latencyThreshold=500}]).config(function($sceDelegateProvider,$stateProvider,$urlRouterProvider,$locationProvider,$httpProvider){var speciesParams="{scientificname}?regiontype&region&dsid&type&embed&noimage&noname&nodesc&noregionselect&nospeciesselect";$sceDelegateProvider.resourceUrlWhitelist(["self","http*://localhost**","http*://*mol.org/**","http*://api.mol.org/**"]),$httpProvider.defaults.useXDomain=!0,$httpProvider.defaults.withCredentials=!0,$urlRouterProvider.otherwise("/overview"),$stateProvider.state("species",{"abstract":!0,templateUrl:"static/layouts/base.html",controller:"molSpeciesCtrl"}).state("species.overview",{views:{"":{templateUrl:"static/layouts/map-left-sidebar.html",controller:"molOverviewCtrl"},"sidebar@species.overview":{templateUrl:"static/views/overview/sidebar.html"},"map@species.overview":{templateUrl:"static/views/overview/map.html"}},url:"/overview/{0}".format(speciesParams)}).state("species.detailed-map",{views:{"":{templateUrl:"static/layouts/map-left-sidebar.html",controller:"molDetailMapCtrl"},"sidebar@species.detailed-map":{templateUrl:"static/views/detailed-map/sidebar.html"},"map@species.detailed-map":{templateUrl:"static/views/detailed-map/map.html"}},url:"/detail/{0}".format(speciesParams)}),$locationProvider.html5Mode(!0)}),String.prototype.format=function(i,safe,arg){function format(){var str=this,len=arguments.length+1;for(i=0;len>i;arg=arguments[i++])safe="object"==typeof arg?JSON.stringify(arg):arg,str=str.replace(RegExp("\\{"+(i-1)+"\\}","g"),safe);return str}return format["native"]=String.prototype.format,format}(),angular.module("percentage",[]).filter("percentage",function($window){return function(input,decimals,suffix){return decimals=angular.isNumber(decimals)?decimals:3,suffix=suffix||"%",$window.isNaN(input)?"":Math.round(input*Math.pow(10,decimals+2))/Math.pow(10,decimals)+suffix}}),angular.module("km2",[]).filter("km2",function($window){return function(input,decimals,suffix){return suffix=suffix||" km²",$window.isNaN(parseFloat(input))?"":input+suffix}});var map,TILE_SIZE=256;MercatorProjection.prototype.fromLatLngToPoint=function(latLng,opt_point){var me=this,point=opt_point||new google.maps.Point(0,0),origin=me.pixelOrigin_;point.x=origin.x+latLng.lng()*me.pixelsPerLonDegree_;var siny=bound(Math.sin(degreesToRadians(latLng.lat())),-.9999,.9999);return point.y=origin.y+.5*Math.log((1+siny)/(1-siny))*-me.pixelsPerLonRadian_,point},MercatorProjection.prototype.fromPointToLatLng=function(point){var me=this,origin=me.pixelOrigin_,lng=(point.x-origin.x)/me.pixelsPerLonDegree_,latRadians=(point.y-origin.y)/-me.pixelsPerLonRadian_,lat=radiansToDegrees(2*Math.atan(Math.exp(latRadians))-Math.PI/2);return new google.maps.LatLng(lat,lng)};var styles=[{featureType:"landscape",stylers:[{color:"#f4f4f4"}]},{featureType:"water",stylers:[{visibility:"simplified"}]},{featureType:"water",elementType:"labels",stylers:[{visibility:"off"}]},{featureType:"water",stylers:[{color:"#808080"}]},{featureType:"administrative",stylers:[{visibility:"on"}]},{featureType:"administrative.country",elementType:"labels",stylers:[{visibility:"on"}]},{featureType:"road",stylers:[{visibility:"off"}]},{featureType:"poi",stylers:[{visibility:"off"}]}],molServices=angular.module("mol.services",["ngResource"]);molServices.factory("GetProtectedAreas",["$resource","$q",function($resource,$q){var abort=$q.defer();return function(refineParams){var url="https://"+document.location.host+"/species/api/protect?"+$.param(refineParams);return $("#debug").html('<a target="debug" href="{0}">{0}</a>'.format(url)),$resource("api/protect",{},{query:{method:"GET",ignoreLoadingBar:!1,params:refineParams,timeout:abort,isArray:!1}})}}]),molServices.factory("GetRefinedRange",["$resource","$q",function($resource,$q){var abort=$q.defer();return function(refineParams){var url="https://"+document.location.host+"/species/api/refine?"+$.param(refineParams);return $("#debug").html('<a target="debug" href="{0}">{0}</a>'.format(url)),$resource("api/suitability/maps",{},{query:{method:"GET",ignoreLoadingBar:!1,params:refineParams,timeout:abort,isArray:!1}})}}]),molServices.factory("GetHabitatChange",["$resource","$q",function($resource,$q){var abort=$q.defer();return function(changeParams){var url="https://"+document.location.host+"/species/api/change?"+$.param(changeParams);return $("#debug").html('<a target="debug" href="{0}">{0}</a>'.format(url)),$resource("api/suitability/stats",{},{query:{method:"GET",ignoreLoadingBar:!1,params:changeParams,timeout:abort,isArray:!1}})}}]),angular.module("mol.filters",[]).filter("interpolate",["version",function(version){return function(text){return String(text).replace(/\%VERSION\%/gm,version)}}]).filter("lat",function(){return function(input,decimals){decimals||(decimals=0),input=1*input;var ns=input>0?"N":"S";input=Math.abs(input);var deg=Math.floor(input),min=Math.floor(60*(input-deg)),sec=(3600*(input-deg-min/60)).toFixed(decimals);return deg+"°"+min+"'"+sec+'"'+ns}}).filter("lon",function(){return function(input,decimals){decimals||(decimals=0),input=1*input;var ew=input>0?"E":"W";input=Math.abs(input);var deg=Math.floor(input),min=Math.floor(60*(input-deg)),sec=(3600*(input-deg-min/60)).toFixed(decimals);return deg+"°"+min+"'"+sec+'"'+ew}}).filter("mKm",["$filter",function($filter){return function(input){var out;return out=input>=1e3?$filter("number")(input/1e3)+" km":$filter("number")(input)+" meters"}}]).filter("toArray",function(){return function(obj){return obj instanceof Object?_.map(obj,function(val,key){return Object.defineProperty(val,"$key",{__proto__:null,value:key})}):obj}}).filter("capitalize",function(){return function(input,scope){return input?(input=input.toLowerCase(),input.substring(0,1).toUpperCase()+input.substring(1)):null}}).filter("trustUrl",function($sce){return function(url){return $sce.trustAsResourceUrl(url)}}),angular.module("mol.directives",[]).directive("staticVersion",["version",function(version){return function(scope,elm,attrs){elm.text(version)}}]).directive("imageonload",function(){return{restrict:"A",link:function(scope,element,attrs){element.bind("error",function(event){var self=this;scope.images=scope.images.filter(function(image){return image!=self.src})})}}}),angular.module("mol.controllers").controller("molSpeciesCtrl",["$http","$scope","$rootScope","$state","$stateParams","$uibModal","$filter","$timeout","$location","$anchorScroll","$q","uiGmapGoogleMapApi",function($http,$scope,$rootScope,$state,$stateParams,$modal,$filter,$timeout,$location,$anchorScroll,$q,uiGmapGoogleMapApi){function getTileUrl(c,z,p){var u=null,x=c.x;c.y;if(p&&c.y<Math.pow(2,z)&&c.y>=0){for(u=p;0>x;)x+=Math.pow(2,z);for(;x>=Math.pow(2,z);)x-=Math.pow(2,z);u=p.replace("{z}",z).replace("{x}",x).replace("{y}",c.y)}return u}function getTile(c,z,d){var grid_url,img=document.createElement("img"),tile_url=getTileUrl(c,z,this.overlay.tile_url),grid=$scope.map.utfGrid;try{"null"!=="{0}".format(this.overlay.grid_url)&&(grid_url=getTileUrl(c,z,this.overlay.grid_url),grid_url&&(grid||(grid={}),grid[z]||(grid[z]={}),grid[z][c.x]||(grid[z][c.x]={}),grid[z][c.x][c.y]||$http.jsonp("{0}?callback=JSON_CALLBACK".format(grid_url)).success(function(data,status,headers,config){grid[z][c.x][c.y]=data}).error(function(err){})))}catch(e){}return img.style.opacity=this.opacity,img.width=this.tileSize.width,img.height=this.tileSize.height,img.onload=function(e){delete $scope.map.tiles[tile_url],Object.keys($scope.map.tiles).length<5&&$scope.$emit("cfpLoadingBar:completed")},img.onerror=function(e){delete $scope.map.tiles[tile_url],img.src="static/img/blank_tile.png",Object.keys($scope.map.tiles).length<5&&$scope.$emit("cfpLoadingBar:completed")},$scope.$emit("cfpLoadingBar:started"),$scope.map.tiles[tile_url]="loading",img.src=tile_url,img}$rootScope.$state=$state,$rootScope.$on("$stateChangeSuccess",function(){}),$scope.region={},$scope.map={tiles:{},bounds:void 0,center:{latitude:0,longitude:0},zoom:0,control:{},options:{fullScreenControl:!0,fullScreenControlOptions:{},streetViewControl:!1,panControl:!1,maxZoom:10,minZoom:1,styles:styles,mapTypeControlOptions:{}},utfGrid:{},overlayMapTypes:[],events:{mousemove:function(map,eventName,event){var i,key,value,grid=$scope.map.utfGrid,zoom=map.getZoom(),numTiles=1<<zoom,projection=new MercatorProjection,worldCoordinate=projection.fromLatLngToPoint(event[0].latLng),pixelCoordinate=new google.maps.Point(worldCoordinate.x*numTiles,worldCoordinate.y*numTiles),tileCoordinate=new google.maps.Point(Math.floor(pixelCoordinate.x/256),Math.floor(pixelCoordinate.y/256)),gridCoordinate=new google.maps.Point(Math.floor((pixelCoordinate.x-256*tileCoordinate.x)/4),Math.floor((pixelCoordinate.y-256*tileCoordinate.y)/4));try{i=grid[zoom][tileCoordinate.x][tileCoordinate.y].grid[gridCoordinate.y].charCodeAt(gridCoordinate.x),i>=93&&i--,i>=35&&i--,i-=32,key=grid[zoom][tileCoordinate.x][tileCoordinate.y].keys[i],value=grid[zoom][tileCoordinate.x][tileCoordinate.y].data[String(key)],value?map.setOptions({draggableCursor:"pointer"}):map.setOptions({draggableCursor:"default"})}catch(e){}}}},$scope.cleanURLName=function(name){return name?name.replace(/ /g,"_"):void 0},$scope.checkToggle=function(url,toggle){return $state.params[toggle]?void 0:url},$scope.addOverlay=function(overlay,type){$scope.map&&$scope.map.overlayMapTypes.push({show:!0,getTile:getTile,tileSize:new google.maps.Size(256,256),name:overlay.type,overlay:overlay,id:type,index:Math.round(1e3*Math.random()),refresh:!0,opacity:overlay.opacity,maxZoom:10})},$scope.updateMap=function(){$scope.map.overlayMapType.refresh!=$scope.map.overlayMapType.refresh},$scope.getBounds=function(bnds){var nbnds={southwest:{latitude:bnds.southWest.lat,longitude:bnds.southWest.lng},northeast:{latitude:bnds.northEast.lat,longitude:bnds.northEast.lng}};return nbnds},$scope.fitBounds=function(bnds){try{var newbnds=angular.copy($scope.getBounds(bnds));Object.keys($scope.region).length&&(newbnds.southwest.longitude=Math.max($scope.region.bnds[0]),newbnds.southwest.latitude=Math.max($scope.region.bnds[1]),newbnds.northeast.longitude=Math.min($scope.region.bnds[2]),newbnds.northeast.latitude=Math.min($scope.region.bnds[3])),$scope.map.bounds=newbnds}catch(e){}},$scope.unionBounds=function(b1,b2){var b=b1;try{return b.southWest.lat=Math.min(b1.southWest.lat,b2.southWest.lat),b.southWest.lng=Math.min(b1.southWest.lng,b2.southWest.lng),b.northEast.lat=Math.max(b1.northEast.lat,b2.northEast.lat),b.northEast.lng=Math.max(b1.northEast.lng,b2.northEast.lng),b}catch(e){return b1}},$scope.$watch("species.scientificname",function(newValue,oldValue){void 0!=newValue&&$state.transitionTo($state.current.name,{scientificname:$scope.cleanURLName(newValue)},{inherit:!0,notify:!1})}),$scope.$watch("species.bounds",function(newValue,oldValue){void 0!=newValue&&$scope.fitBounds(newValue)}),$scope.$watch("region.bnds",function(newValue,oldValue){if(void 0!=newValue){var bnds={southWest:{lat:newValue[1],lng:newValue[0]},northEast:{lat:newValue[3],lng:newValue[2]}};$scope.fitBounds(bnds)}})}]),angular.module("mol.controllers").controller("molDetailWindowCtrl",["$scope",function($scope){}]).controller("molDetailMapCtrl",["$compile","$window","$http","$uibModal","$scope","$state","$filter","$timeout","$location","$anchorScroll","$q","MOLApi","uiGmapGoogleMapApi",function($compile,$window,$http,$modal,$scope,$state,$filter,$timeout,$location,$anchorScroll,$q,MOLApi,uiGmapGoogleMapApi){$scope.uncertainty={min:0,max:32e3,def:8e3},$scope.year={min:1970,max:2015,nulls:!1},$scope.filters={uncertainty:!0,years:!0,limit:!0,points:5e3},$scope.toggles={sidebarVisible:!0,featuresActive:!1,looking:!1},$scope.mapUpdater=void 0,$scope.canceller=$q.defer(),$scope.visibleDatasets=void 0,$scope.$watch("uncertainty",function(newValue,oldValue){newValue&&$scope.updateMap()},!0),$scope.$watch("year",function(newValue,oldValue){newValue&&$scope.updateMap()},!0),$scope.$watch("filters",function(newValue,oldValue){newValue&&$scope.updateMap()},!0),$scope.updateMap=function(){if($scope.stale=!1,$scope.canceller.resolve(),$scope.canceller=$q.defer(),$scope.map.utfGrid={},$scope.map.overlayMapTypes=[],$scope.species){if($scope.mapUpdater)try{$timeout.cancel($scope.mapUpdater)}catch(e){}$scope.mapUpdater=$timeout(function(){$http({withCredentials:!1,method:"POST",timeout:$scope.canceller,url:"https://mol.cartodb.com/api/v1/map/named/detail_map",data:{min_year:$scope.filters.years?$scope.year.min:-5555555,max_year:$scope.filters.years?$scope.year.max:5555555,min_uncertainty:$scope.filters.uncertainty?$scope.uncertainty.min:-5555555,max_uncertainty:$scope.filters.uncertainty?$scope.uncertainty.max:5555555,scientificname:$scope.species.scientificname,datasets:$scope.visibleDatasets,null_years:$scope.filters.years?$scope.year.nulls.toString():(!0).toString(),default_uncertainty:2e4,point_limit:$scope.filters.limit&&void 0!=$scope.filters.limit?$scope.filters.points:0}}).success(function(result,status,headers,config){$scope.species&&result.layergroupid&&($scope.tilesloaded=!1,$scope.addOverlay({tile_url:""+"https://{0}/mol/api/v1/map/{1}/{z}/{x}/{y}.png".format(result.cdn_url.https,result.layergroupid),grid_url:""+"http://{0}/mol/api/v1/map/{1}/0/{z}/{x}/{y}.grid.json".format(result.cdn_url.https,result.layergroupid),key:result.layergroupid,attr:"©2014 Map of Life",name:"detail",opacity:.8,type:"detail"},"detail"))})},500)}},$scope.datasetMetadata=function(dataset){MOLApi({service:"datasets/metadata",params:{id:dataset.id},canceller:$scope.canceller,loading:!0}).then(function(results){var modalInstance,metadata=results.data;modalInstance=$modal.open({templateUrl:"static/views/detailed-map/dataset_metadata_modal.html",controller:function($scope,$uibModalInstance){var items=[{collapsed:!1,items:metadata}];$scope.modal={title:dataset.title,items:items},$scope.close=function(){$uibModalInstance.dismiss("cancel")}},size:"lg"})})},$scope.typeMetadata=function(type){MOLApi({service:"datasets/type",params:{id:type.id},canceller:$scope.canceller,loading:!0}).then(function(results){var modalInstance,metadata=results.data;modalInstance=$modal.open({templateUrl:"static/partials/metadata_modal.html",controller:function($scope,$uibModalInstance){var items=[{collapsed:!1,items:metadata}];$scope.modal={title:type.title,items:items},$scope.close=function(){$uibModalInstance.dismiss("cancel")}},size:"lg"})})},$scope.featureMetadataModal=function(dataset){var modalInstance;modalInstance=$modal.open({templateUrl:"static/partials/metadata_modal.html",controller:function($scope,$uibModalInstance){var items=[],ct=1;angular.forEach(dataset.features,function(feature){var item={title:"{0} record at {1}, {2}".format(dataset.dataset_meta.dataset_title,$filter("lat")(feature.lat),$filter("lon")(feature.lng)),collapsed:1!=ct,items:[]};ct++,angular.forEach(feature.metadata,function(v,k){item.items.push({label:k,value:v})}),items.push(item)}),$scope.modal={title:dataset.title,items:items},$scope.close=function(){$uibModalInstance.dismiss("cancel")}},size:"lg"})},$scope.getFeatures=function(lat,lng,zoom,scientificname){MOLApi({canceller:$scope.canceller,loading:!0,service:"species/featuremetadata",version:"0.x",creds:!0,params:{scientificname:scientificname,lat:lat,lng:lng,zoom:zoom,datasets:$scope.visibleDatasets,min_year:$scope.filters.years?$scope.year.min:-5555555,max_year:$scope.filters.years?$scope.year.max:5555555,min_uncertainty:$scope.filters.uncertainty?$scope.uncertainty.min:-5555555,max_uncertainty:$scope.filters.uncertainty?$scope.uncertainty.max:5555555,scientificname:$scope.species.scientificname,datasets:$scope.visibleDatasets,null_years:$scope.filters.years?$scope.year.nulls.toString():(!0).toString(),default_uncertainty:2e4,point_limit:$scope.filters.limit?$scope.filters.points:0}}).then(function(results){results.data[0]?angular.extend($scope.map.infowindow.model,{searching:!1,featureResult:results.data[0],datasets:$scope.datasets}):$scope.map.infowindow={},$scope.$apply()})},$scope.map.events.click=function(map,eventName,coords){$scope.map.infowindow={id:coords[0].latLng.lat()+"-"+coords[0].latLng.lng(),show:!0,options:{animation:0},coords:{latitude:coords[0].latLng.lat(),longitude:coords[0].latLng.lng()},model:{searching:!0},templateUrl:"static/views/detailed-map/infowindow.html"},$scope.$apply(),$scope.getFeatures(coords[0].latLng.lat(),coords[0].latLng.lng(),map.getZoom(),$scope.species.scientificname)},$scope.getLayers=function(scientificname){MOLApi({canceller:$scope.canceller,loading:!0,service:"species/layermetadata",version:"0.x",creds:!0,params:{scientificname:scientificname}}).success(function(layers){void 0!=layers&&($scope.layers=layers,$scope.types={},$scope.datasets={},$scope.selectedFeatures={},angular.forEach(layers,function(layer){$scope.datasets[layer.dataset_id]=layer,void 0===$scope.types[layer.product_type]?$scope.types[layer.product_type]={id:layer.product_type,title:layer.type_title,bounds:layer.bounds,visible:"regionalchecklist"!=layer.product_type,feature_ct:0,datasets:{}}:$scope.types[layer.product_type].bounds=$scope.unionBounds(angular.copy($scope.types[layer.product_type].bounds),angular.copy(layer.bounds)),"regionalchecklist"!=layer.product_type&&($scope.species.bounds=$scope.unionBounds(angular.copy(layer.bounds),angular.copy($scope.species.bounds))),$scope.types[layer.product_type].datasets[layer.dataset_id]={visible:layer.visible,id:layer.dataset_id,title:layer.dataset_title,bounds:layer.bounds,metadata:void 0,feature_ct:layer.feature_count,features:[]},"range"!=layer.product_type?$scope.types[layer.product_type].feature_ct+=layer.feature_count:$scope.types[layer.product_type].feature_ct++,$scope.datasets[layer.dataset_id]=layer,$scope.updateMap()}),$scope.newSpecies=!0,$scope.updateLayers())})},$scope.$watch("types",function(newValue,oldValue){newValue&&($scope.updateLayers(),$scope.updateMap())},!0),$scope.toggleType=function(type,bool){angular.forEach($scope.types[type].datasets,function(dataset){dataset.visible=bool})},$scope.toggleDataset=function(type){var visible=0;angular.forEach(type.datasets,function(dataset){dataset.visible&&visible++}),type.visibleDatasets=visible,0==visible?type.visible=!1:type.visible=!0,type.partial=visible<Object.keys(type.datasets).length&&visible>0},$scope.selectedLayers=[],$scope.updateLayers=function(){var datasets=[];angular.forEach($scope.types,function(type){type.visible&&angular.forEach(type.datasets,function(dataset){dataset.visible&&datasets.push(dataset.id)})}),$scope.visibleDatasets=datasets.join(",")},$scope.$watch("species.scientificname",function(newValue,oldValue){$scope.toggles.featuresActive=!1,$scope.toggles.looking=!1,void 0!=newValue&&($scope.types=void 0,$scope.getLayers(newValue))})}]);